=-*- mode: org; mode: visual-line;  -*-=
#+STARTUP: indent

* =twizzle= [[http://travis-ci.org/cassiel/twizzle][https://secure.travis-ci.org/cassiel/twizzle.png]] [[https://www.versioneye.com/user/projects/53d2a43b851c56dc68000231][https://www.versioneye.com/user/projects/53d2a43b851c56dc68000231/badge.svg]]

* Introduction

The Adventures of Twizzle: a Clojure library for simple timeline-based automation, useful for animation systems.

An automation state maps named /channels/ to time-varying values. Each channel can be populated with automation segments, each of which has a start time, duration and target value for the channel at the end of the fade.

=twizzle= doesn't have a specific notion of time: it just uses timeline values which can be milliseconds (for realtime animation), frames (for rendering), floats, or anything else numerical.

By default, channel values are rationals or floats (mainly because the default interpolator works in conventional arithmetic), but it's possible to attach interpolation functions to allow automation over arbitrary data values (for example, vectors of floats for RGB colour mixing), or to implement unusual fade behaviours (such as an on/off gate for the period of a fade).

* Usage
** Setup

In =project.clj=:

#+BEGIN_SRC clojure
  [eu.cassiel/twizzle "0.1.0-SNAPSHOT"]
#+END_SRC

In the code:

#+BEGIN_SRC clojure
  (ns example
    (:require (eu.cassiel [twizzle :as tw])))
#+END_SRC

Create a new automation state with

#+BEGIN_SRC clojure
  (def state (tw/initial))
#+END_SRC

For a state with non-default starting values, add an initialisation map:

#+BEGIN_SRC clojure
  (def state (tw/initial :init {:pitchbend 64
                                :starts-at-one 1.0}))
#+END_SRC

Note that default initial value is =nil=. The default interpolator will interpret a start point of =nil= as =0= in any calculations, so once you start fading you'll get rationals or floats, but before any fades take effect the sampled value will come back as =nil=.

** Adding Fades

Add an automation fade to a state:

#+BEGIN_SRC clojure
  (tw/automate-at state :my-param 200 10 1.0)
#+END_SRC

Arguments are: state, channel name, starting timestamp, duration, final (target) value. This returns a new state. The fade duration (which here has length =10=) specifies that the fade terminates at =210=; sampling here will return =1.0=. Sampling at =209= will return a value slightly biased towards the previous value of =:my-param=.

Overlapping fades on the same channel is discouraged. (The behaviour is well-defined but probably not useful.)

Anywhere beyond a fade, sampling the value will return the final value of the fade (in the example above, =1.0=).

See also =automate-by=, which starts a fade at a relative offset from the state's current location.

** Location and Sampling

Locate a state to a particular position:

#+BEGIN_SRC clojure
  (tw/locate state 300)
#+END_SRC

A call to =locate= returns a new state with any fades which lie totally in front of (earlier than) the specified timestamp (here, =300=) to be removed, once they've been sampled: in other words, the fades are /chased/, so that the target values of purged fades are applied. Example:

#+BEGIN_SRC clojure
  (-> (tw/initial)
      (tw/automate-at :my-param 100 10 9.9)
      (tw/locate 150)
      (tw/sample :my-param))
#+END_SRC

This last example returns =9.9=, the target of the purged fade. If we added a second locate point at =50= on the line after the first locate (say: in front of the original fade), the result would still be =9.9=, since the first =locate= would have chased that fade and removed it.

If a fade is in scope (i.e. the =locate= timestamp lies within the fade), it is not purged, and the state's position can still be shifted back and forth along it (although I don't know why you'd want to do that).

Sample a state at its current timestamp:

#+BEGIN_SRC clojure
  (tw/sample state :pitchbend)
#+END_SRC

A call to =sample= just returns the sampled value at that timestamp; the state is not changed.

** TODO Interpolating

For automation over values more interesting than floats, provide an interpolation function:

#+BEGIN_SRC clojure
  (def state (tw/initial :interp {:foreground colour-mix
                                  :background colour-mix}
                         :init {:foreground [1 1 1]
                                :background [0 0 0]}))
#+END_SRC

The interpolator (in this case, =colour-mix=) will be called with three arguments: start value, end value, and interpolation position (from =0.0= to =1.0=). Unless =nil= works as a potential initial value, provide that as well.

We have some interpolators (including the default) in namespace =eu.cassiel.twizzle.interpolators= - see the [[https://cassiel.github.io/twizzle][documentation]].

** Complex Keys

Since this is Clojure, there's nothing stopping you using complex keys, like vectors, as channel names:

#+BEGIN_SRC clojure
  (-> (tw/initial :init {[:VOLUME 3] 127})
      ...
      (tw/sample [:VOLUME 3]))
#+END_SRC

This would allow groups of channels to be set up and indexed programmatically, while allowing common =:init= or =:interp= values to be set for them (if you don't mind a bit of =reduce= action):

#+BEGIN_SRC clojure
  (tw/initial :init (reduce (fn [m k] (assoc m [:VOLUME k] 127))
                            nil
                            (range 10)))
#+END_SRC

* Documentation

The source documentation is [[https://cassiel.github.io/twizzle][here]].

* Changelog

- =0.1.1-SNAPSHOT=, =2014-07-31= :: Bug-fix (purging multiple fades).

- =0.1.0-SNAPSHOT=, =2014-07-31= :: Internal release.

* License

Copyright Â© 2014 Nick Rothwell.

Distributed under the Eclipse Public License either version 1.0 or (at your option) any later version.
