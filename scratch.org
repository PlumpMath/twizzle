-*- mode: org; mode: visual-line; -*-
#+STARTUP: indent

* SCRATCH
** Random testing

#+BEGIN_SRC clojure
  (defn foo [& {:keys [init] :or {init {}}}]
    {:got-it init})

  (foo :init {:A 24})
  (foo)

  (map (fn [[a b]] (+ a b))
       (zipmap [1 2 3] [4 5 6]))


  (->> (interleave [1 2 3] [4 5 6])
       (partition 2)
       (map (fn [[x y]] (+ x y))))


  (reduce-kv (fn [m k v] (assoc m k (- v))) nil {:A 1 :B 3})

  (interleave [11 22 33] (repeat 0))

  (let [[f & f'] (range 10)] {:f f :f' f'})
#+END_SRC

** Internal testing

#+BEGIN_SRC clojure
  (ns user
    (:require (eu.cassiel [twizzle :as tw])))

  (tw/apply-to-channels {:channels {:A {:fades (seq [1 4 66 78])}
                                    :B {:fades (seq [999]) :current 3.142}
                                    :C {:fades nil}}}
                        (fn [x] (-> x
                                   (update-in [:fades] #(conj % 0))
                                   (update-in [:current] (constantly 0.5)))))

  (tw/automate (tw/initial) :A 100 10 1.0)

  (-> (tw/initial :init {:X 99})
      (tw/automate :X 100 20 0)
      (tw/locate 100)
      (tw/sample :X))

  (-> (tw/initial :init {:X 100}
                  :interp {:X (fn [v1 v2 p] p)})
      (tw/automate :X 100 20 0)
      (tw/locate 110)
      (tw/sample :X))

  (-> (tw/initial :interp {:X (fn [v1 v2 p] p)})
      (tw/automate :X 100 20 0)
      (tw/locate 110)
      (tw/sample :X))

  (-> (tw/initial)
      (tw/locate 105)
      (tw/automate :my-param 100 10 10.0)
      (tw/sample :my-param))

  (-> (tw/initial)
      (tw/automate-at :A 100 10 1.0)
      (tw/clear :A)
      (tw/locate 200)
      (tw/sample :A))

  (-> (tw/initial)
      (tw/automate-at :A 100 10 1)
      (tw/locate 105)
      (get-in [:channels :A])
      #_ (tw/sample-channel 105)

      #_ (tw/clear :A)
      #_ (tw/sample :A))

  (as-> (tw/initial) S
        (tw/automate-at S :A 100 10 1)
        (tw/automate-at S :B 100 10 1)
        (tw/clear S :A)
        (tw/locate S 105)
        (map #(tw/sample S %) [:A :B]))
#+END_SRC
